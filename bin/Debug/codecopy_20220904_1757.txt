//read only 4 bytes from the file

using System.Diagnostics.Metrics;
using System.Reflection.PortableExecutable;

//Declare full path to list text file
string headerFilePath = Path.GetDirectoryName(System.Reflection.Assembly.GetExecutingAssembly().Location) + "\\list.txt";

//Declare list type headers into which the magic contents will be loaded
List<Headers> headers = new();

//Load magic text contents into list headers
Load_Headers(headerFilePath, ref headers);

switch (args[0])
{
    case "ft":
        //Display File Type
        //string argFilePath1 = "C:\\Users\\Admin\\Desktop\\text.xlsx";//args[1];"C:\\Users\\Admin\\Desktop\\text.xlsx";
        GetFileType(args[1], ref headers); //arg[1]:  File path to get type of, arg[2]:  list of headers
        break;
    case "pb":
        //Patch the file with the selected header from the header list
        //string argFilePath2 = "C:\\Users\\Admin\\Desktop\\text.xlsx";//args[0];
        PatchBytes(args[1], args[2], ref headers);//arg[1]:  File path of file to patch, arg[2]:  Index of header to patch with, arg[3]:  list of headers
        break;
    case "dh":
        //Display headers list
        DisplayHeaders(ref headers); //arg[1]:  list of headers
        break;
    default:
        Console.WriteLine("Error:  Unknown command!!!");
        Console.WriteLine("Press enter to exit....");
        Console.ReadLine();
        break;
}

static string HexToAscii(string hexValues, int lengthToPrint)
{
    string ascii = string.Empty;

    string hex= hexValues[..lengthToPrint]; //substring from 0 to lenght

    string[] splitValues = hex.Split(" ");

    foreach (string hValue in splitValues)
    {
        int value = Convert.ToInt32(hValue, 16);
        if (value > 31) //ignore non-printable characters
        {
            char charValue = (char)value;
            ascii += charValue.ToString();
        }
    }

    return ascii;
}

///<summary>
///Load headers into the header list
/// </summary>
static void Load_Headers(string headerListFilePath, ref List<Headers> headersList)
{
    var magicBytes = File.ReadAllLines(@headerListFilePath);
    foreach (var magic in magicBytes)
    {
        string[] stagingArray = magic.Split(new Char[] { ',' }).ToArray();
        headersList.Add(new Headers() { HexValues = stagingArray[0], Mnemonic = stagingArray[1], Type = stagingArray[2] });
    }
}


/// <summary>
/// Patch header from offset 0
/// </summary> 
static void PatchBytes(string args1, string args2, ref List<Headers> headersList)
{   
    using FileStream fs = File.OpenWrite(args1);//@argFilePath
    
    int indexTemp = Convert.ToInt32(args2);
    var data = headersList[indexTemp-1].HexValues.Replace(" ", ""); //"504B";//args[1];
    byte[] buffer = Convert.FromHexString(data);
    fs.Write(buffer, 0, buffer.Length);
    Console.WriteLine("Patch Applied!!!");
}

/// <summary>
/// Display headers list
/// </summary>
static void DisplayHeaders(ref List<Headers> headersList)
{
    Console.WriteLine("\n{0,-4} {1,-30} {2,-30} {3,-50}","ID","Hex", "Mnemonic", "Type");
    Console.WriteLine("----------------------------------------------------------------------------------------------");
    int counter = 1;
    foreach (Headers headers1 in headersList)
    {
        //composite formatting
        Console.WriteLine("{0,-4} {1,-30} {2,-30} {3,-50}", counter, headers1.HexValues, headers1.Mnemonic, headers1.Type);
        counter++;
    }
    Console.WriteLine("----------------------------------------------------------------------------------------------");
}

/// <summary>
/// Display File Type
/// </summary>
static void GetFileType(string args1, ref List<Headers> headersList)
{
    const int HEADER_SIZE = 64;
    byte[] bytesFile = new byte[HEADER_SIZE];

    using (FileStream fs = File.OpenRead(args1))//@argFilePath
    {
        fs.Read(bytesFile, 0, HEADER_SIZE);
        fs.Close();
    }

    //Convert the byte file to its hex string representation
    string header = BitConverter.ToString(bytesFile).Replace("-", " ");
    Console.WriteLine("-----------------------------------------------------------");

    try
    {
        var query = headersList.Where(x => header.StartsWith(x.HexValues)).First();
        Console.WriteLine("{0,-10} {1,-64}", "Header:", query.HexValues);
        Console.WriteLine("{0,-10} {1,-64}", "Mnemonic:", HexToAscii(header, query.HexValues.Length)); //header.Substring(0,query.HexValues.Length));header[..query.HexValues.Length])
        Console.WriteLine("{0,-10} {1,-64}", "Type:", query.Type);
    }
    catch (InvalidOperationException)
    {
        Console.WriteLine("Cannot find exact matching header!!!");
        Console.WriteLine("Current Header Information: (Displaying 16 bytes from offset 0)"); //catered for 4 spaces conatined in the header variable
        Console.WriteLine("{0,-10} {1,-64}", "Header:", header[..20]);
        Console.WriteLine("{0,-10} {1,-64}", "Mnemonic:", HexToAscii(header, 20));
    }
    catch (Exception ex)
    {
        Console.WriteLine("Error info:" + ex.Message);
        Console.WriteLine("Press enter to exit....");
        Console.ReadLine();
    }
    finally
    {
        Console.WriteLine("-----------------------------------------------------------");
    }
   
}

class Headers
{
    public string HexValues { get; set; }   
    public string Mnemonic { get; set; }
    public string Type { get; set; }

    public override string ToString()
    {
        return $"Value:\t{HexValues}\t|\t{Mnemonic}\t|\t{Type}";
    }
}
